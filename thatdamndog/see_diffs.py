# DO NOT EDIT THIS FILE
import io
import os
import sys
sys.path.insert(0, '..')

from scaffold import grayscale
from PIL import Image
from image_converter import ListToImage, ImageToList

class ImageDifference:
    def __init(self):
        pass
        
    # Returns true of the image (expected) and (actual) are a pixel perfect match.
    # If they are not a perfect match, saves a new image in (output_file) depending
    # on the (diff_type) chosen, and returns false. 
    def generate_image_delta(self,expected, actual, output_file, diff_type):
        expected_img = Image.open(expected)
        expected_pixels = ImageToList(expected_img)

        actual_img = Image.open(actual)
        actual_pixels = ImageToList(actual_img)

        expected_width = len(expected_pixels)
        actual_width = len(actual_pixels)
        expected_height = len(expected_pixels[0])
        actual_height = len(actual_pixels[0])

        if actual_width != expected_width or actual_height != expected_height:
            print("Images are different dimensions. Expected: " + expected_width
            + " by " + expected_height + "px");
            return False

        output_pixels = actual_pixels
        matching = True;

        for row in range(actual_width):
            for col in range(actual_height):
                r_actual, g_actual, b_actual = actual_pixels[row][col]
                r_expected, g_expected, b_expected = expected_pixels[row][col]

                if r_actual != r_expected or g_actual != g_expected or b_actual != b_expected:
                    matching = False

                    # Highlight in red where the pixels differ.
                    if diff_type == "highlight":
                        output_pixels[row][col] = (255, 0, 0)

                    # Overlay by averaging the pixels. This is good for comparing line drawings or shapes.
                    if diff_type == "overlay":
                        output_pixels[row][col] = ((r_actual + r_expected) / 2, (g_actual + g_expected) / 2, (b_actual + b_expected) / 2)

        if matching:
            return True

        output_img = ListToImage(output_pixels)
        output_img.save(output_file)

        print("Images do not match. In the above panel click 'Files' then check/" + output_file + " for diff.")

        return False

if __name__ == '__main__':

    source = "../images/dog.png"
    generated_file_path = "grayscale.png"
    expected_file_path = "grayscale_sln.png"
    diff_file_path = "grayscale_diff.png"

    filtered_pixels = grayscale(ImageToList(Image.open(source)))
    filtered_image = ListToImage(filtered_pixels)
    filtered_image.save(generated_file_path)


    if os.path.exists(diff_file_path):
        os.remove(diff_file_path)
        print(f"The file {diff_file_path} was deleted.")

    image_diff = ImageDifference()
    matches = image_diff.generate_image_delta(expected_file_path,generated_file_path, diff_file_path, "highlight")
    if matches:
        print("Images match!No diff file being created!")
    
    
